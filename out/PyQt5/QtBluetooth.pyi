import PyQt5.QtCore
import PyQt5.sip
import QBluetooth
import QBluetoothDeviceDiscoveryAgent
import QBluetoothDeviceInfo
import QBluetoothLocalDevice
import QBluetoothServiceDiscoveryAgent
import QBluetoothServiceInfo
import QBluetoothSocket
import QBluetoothTransferRequest
import QBluetoothUuid
import QIODevice
import QLowEnergyAdvertisingData
import QLowEnergyAdvertisingParameters
import QLowEnergyCharacteristic
import QLowEnergyController
import QLowEnergyService
import QLowEnergyServiceData
import enum
import sip
from typing import Any, Callable, ClassVar, Iterable, overload

class QBluetooth(sip.simplewrapper):
    class AttAccessConstraint(int):
        def __or__(self, other): ...
        def __reduce__(self): ...
        def __ror__(self, other): ...

    class AttAccessConstraints(sip.wrapper):
        def __and__(self, other): ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __iand__(self, other): ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __invert__(self): ...
        def __ior__(self, other): ...
        def __ixor__(self, other): ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other): ...
        def __rand__(self, other): ...
        def __ror__(self, other): ...
        def __rxor__(self, other): ...
        def __xor__(self, other): ...

    class Security(int):
        def __or__(self, other): ...
        def __reduce__(self): ...
        def __ror__(self, other): ...

    class SecurityFlags(sip.wrapper):
        def __and__(self, other): ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __iand__(self, other): ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __invert__(self): ...
        def __ior__(self, other): ...
        def __ixor__(self, other): ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other): ...
        def __rand__(self, other): ...
        def __ror__(self, other): ...
        def __rxor__(self, other): ...
        def __xor__(self, other): ...
    AttAuthenticationRequired: ClassVar[QBluetooth.AttAccessConstraint] = ...
    AttAuthorizationRequired: ClassVar[QBluetooth.AttAccessConstraint] = ...
    AttEncryptionRequired: ClassVar[QBluetooth.AttAccessConstraint] = ...
    Authentication: ClassVar[QBluetooth.Security] = ...
    Authorization: ClassVar[QBluetooth.Security] = ...
    Encryption: ClassVar[QBluetooth.Security] = ...
    NoSecurity: ClassVar[QBluetooth.Security] = ...
    Secure: ClassVar[QBluetooth.Security] = ...

class QBluetoothAddress(sip.wrapper):
    def clear(self) -> Any: ...
    def isNull(self) -> bool: ...
    def toString(self) -> str: ...
    def toUInt64(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QBluetoothDeviceDiscoveryAgent(PyQt5.QtCore.QObject):
    class DiscoveryMethod(int):
        def __or__(self, other): ...
        def __reduce__(self): ...
        def __ror__(self, other): ...

    class DiscoveryMethods(sip.wrapper):
        def __and__(self, other): ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __iand__(self, other): ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __invert__(self): ...
        def __ior__(self, other): ...
        def __ixor__(self, other): ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other): ...
        def __rand__(self, other): ...
        def __ror__(self, other): ...
        def __rxor__(self, other): ...
        def __xor__(self, other): ...

    class Error(int):
        def __reduce__(self): ...

    class InquiryType(int):
        def __reduce__(self): ...
    ClassicMethod: ClassVar[QBluetoothDeviceDiscoveryAgent.DiscoveryMethod] = ...
    GeneralUnlimitedInquiry: ClassVar[QBluetoothDeviceDiscoveryAgent.InquiryType] = ...
    InputOutputError: ClassVar[QBluetoothDeviceDiscoveryAgent.Error] = ...
    InvalidBluetoothAdapterError: ClassVar[QBluetoothDeviceDiscoveryAgent.Error] = ...
    LimitedInquiry: ClassVar[QBluetoothDeviceDiscoveryAgent.InquiryType] = ...
    LowEnergyMethod: ClassVar[QBluetoothDeviceDiscoveryAgent.DiscoveryMethod] = ...
    NoError: ClassVar[QBluetoothDeviceDiscoveryAgent.Error] = ...
    NoMethod: ClassVar[QBluetoothDeviceDiscoveryAgent.DiscoveryMethod] = ...
    PoweredOffError: ClassVar[QBluetoothDeviceDiscoveryAgent.Error] = ...
    UnknownError: ClassVar[QBluetoothDeviceDiscoveryAgent.Error] = ...
    UnsupportedDiscoveryMethod: ClassVar[QBluetoothDeviceDiscoveryAgent.Error] = ...
    UnsupportedPlatformError: ClassVar[QBluetoothDeviceDiscoveryAgent.Error] = ...
    def canceled(self, *args, **kwargs): ...
    @classmethod
    def childEvent(cls, *args, **kwargs): ...
    @classmethod
    def connectNotify(cls, *args, **kwargs): ...
    @classmethod
    def customEvent(cls, *args, **kwargs): ...
    def deviceDiscovered(self, *args, **kwargs): ...
    def deviceUpdated(self, *args, **kwargs): ...
    @classmethod
    def disconnectNotify(cls, *args, **kwargs): ...
    def discoveredDevices(self) -> list[QBluetoothDeviceInfo]: ...
    def error(self, *args, **kwargs): ...
    def errorString(self) -> str: ...
    def finished(self, *args, **kwargs): ...
    def inquiryType(self) -> QBluetoothDeviceDiscoveryAgent.InquiryType: ...
    def isActive(self) -> bool: ...
    @classmethod
    def isSignalConnected(cls, *args, **kwargs): ...
    def lowEnergyDiscoveryTimeout(self) -> int: ...
    @classmethod
    def receivers(cls, *args, **kwargs): ...
    @classmethod
    def sender(cls, *args, **kwargs): ...
    @classmethod
    def senderSignalIndex(cls, *args, **kwargs): ...
    def setInquiryType(self, type: QBluetoothDeviceDiscoveryAgent.InquiryType) -> Any: ...
    def setLowEnergyDiscoveryTimeout(self, msTimeout: int) -> Any: ...
    @overload
    def start(self) -> Any: ...
    @overload
    def start(self, method: QBluetoothDeviceDiscoveryAgent.DiscoveryMethods | QBluetoothDeviceDiscoveryAgent.DiscoveryMethod) -> Any: ...
    def stop(self) -> Any: ...
    @classmethod
    def supportedDiscoveryMethods(cls) -> QBluetoothDeviceDiscoveryAgent.DiscoveryMethods: ...
    @classmethod
    def timerEvent(cls, *args, **kwargs): ...

class QBluetoothDeviceInfo(sip.wrapper):
    class CoreConfiguration(int):
        def __or__(self, other): ...
        def __reduce__(self): ...
        def __ror__(self, other): ...

    class CoreConfigurations(sip.wrapper):
        def __and__(self, other): ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __iand__(self, other): ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __invert__(self): ...
        def __ior__(self, other): ...
        def __ixor__(self, other): ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other): ...
        def __rand__(self, other): ...
        def __ror__(self, other): ...
        def __rxor__(self, other): ...
        def __xor__(self, other): ...

    class DataCompleteness(int):
        def __reduce__(self): ...

    class Field(enum.IntEnum):
        __new__: ClassVar[Callable] = ...
        All: ClassVar[QBluetoothDeviceInfo.Field] = ...
        ManufacturerData: ClassVar[QBluetoothDeviceInfo.Field] = ...
        None_: ClassVar[QBluetoothDeviceInfo.Field] = ...
        RSSI: ClassVar[QBluetoothDeviceInfo.Field] = ...
        _generate_next_value_: ClassVar[Callable] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _member_type_: ClassVar[type[int]] = ...
        _unhashable_values_: ClassVar[list] = ...
        _use_args_: ClassVar[bool] = ...
        _value2member_map_: ClassVar[dict] = ...
        def __format__(self, *args, **kwargs) -> str: ...

    class Fields(sip.wrapper):
        def __and__(self, other): ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __iand__(self, other): ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __invert__(self): ...
        def __ior__(self, other): ...
        def __ixor__(self, other): ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other): ...
        def __rand__(self, other): ...
        def __ror__(self, other): ...
        def __rxor__(self, other): ...
        def __xor__(self, other): ...

    class MajorDeviceClass(int):
        def __reduce__(self): ...

    class MinorAudioVideoClass(int):
        def __reduce__(self): ...

    class MinorComputerClass(int):
        def __reduce__(self): ...

    class MinorHealthClass(int):
        def __reduce__(self): ...

    class MinorImagingClass(int):
        def __reduce__(self): ...

    class MinorMiscellaneousClass(int):
        def __reduce__(self): ...

    class MinorNetworkClass(int):
        def __reduce__(self): ...

    class MinorPeripheralClass(int):
        def __reduce__(self): ...

    class MinorPhoneClass(int):
        def __reduce__(self): ...

    class MinorToyClass(int):
        def __reduce__(self): ...

    class MinorWearableClass(int):
        def __reduce__(self): ...

    class ServiceClass(int):
        def __or__(self, other): ...
        def __reduce__(self): ...
        def __ror__(self, other): ...

    class ServiceClasses(sip.wrapper):
        def __and__(self, other): ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __iand__(self, other): ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __invert__(self): ...
        def __ior__(self, other): ...
        def __ixor__(self, other): ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other): ...
        def __rand__(self, other): ...
        def __ror__(self, other): ...
        def __rxor__(self, other): ...
        def __xor__(self, other): ...
    AllServices: ClassVar[QBluetoothDeviceInfo.ServiceClass] = ...
    AudioService: ClassVar[QBluetoothDeviceInfo.ServiceClass] = ...
    AudioVideoDevice: ClassVar[QBluetoothDeviceInfo.MajorDeviceClass] = ...
    BaseRateAndLowEnergyCoreConfiguration: ClassVar[QBluetoothDeviceInfo.CoreConfiguration] = ...
    BaseRateCoreConfiguration: ClassVar[QBluetoothDeviceInfo.CoreConfiguration] = ...
    Camcorder: ClassVar[QBluetoothDeviceInfo.MinorAudioVideoClass] = ...
    CapturingService: ClassVar[QBluetoothDeviceInfo.ServiceClass] = ...
    CarAudio: ClassVar[QBluetoothDeviceInfo.MinorAudioVideoClass] = ...
    CardReaderPeripheral: ClassVar[QBluetoothDeviceInfo.MinorPeripheralClass] = ...
    CellularPhone: ClassVar[QBluetoothDeviceInfo.MinorPhoneClass] = ...
    CommonIsdnAccessPhone: ClassVar[QBluetoothDeviceInfo.MinorPhoneClass] = ...
    ComputerDevice: ClassVar[QBluetoothDeviceInfo.MajorDeviceClass] = ...
    CordlessPhone: ClassVar[QBluetoothDeviceInfo.MinorPhoneClass] = ...
    DataComplete: ClassVar[QBluetoothDeviceInfo.DataCompleteness] = ...
    DataIncomplete: ClassVar[QBluetoothDeviceInfo.DataCompleteness] = ...
    DataUnavailable: ClassVar[QBluetoothDeviceInfo.DataCompleteness] = ...
    DesktopComputer: ClassVar[QBluetoothDeviceInfo.MinorComputerClass] = ...
    DigitizerTabletPeripheral: ClassVar[QBluetoothDeviceInfo.MinorPeripheralClass] = ...
    GamepadPeripheral: ClassVar[QBluetoothDeviceInfo.MinorPeripheralClass] = ...
    GamingDevice: ClassVar[QBluetoothDeviceInfo.MinorAudioVideoClass] = ...
    HandheldClamShellComputer: ClassVar[QBluetoothDeviceInfo.MinorComputerClass] = ...
    HandheldComputer: ClassVar[QBluetoothDeviceInfo.MinorComputerClass] = ...
    HandsFreeDevice: ClassVar[QBluetoothDeviceInfo.MinorAudioVideoClass] = ...
    Headphones: ClassVar[QBluetoothDeviceInfo.MinorAudioVideoClass] = ...
    HealthBloodPressureMonitor: ClassVar[QBluetoothDeviceInfo.MinorHealthClass] = ...
    HealthDataDisplay: ClassVar[QBluetoothDeviceInfo.MinorHealthClass] = ...
    HealthDevice: ClassVar[QBluetoothDeviceInfo.MajorDeviceClass] = ...
    HealthGlucoseMeter: ClassVar[QBluetoothDeviceInfo.MinorHealthClass] = ...
    HealthPulseOximeter: ClassVar[QBluetoothDeviceInfo.MinorHealthClass] = ...
    HealthStepCounter: ClassVar[QBluetoothDeviceInfo.MinorHealthClass] = ...
    HealthThermometer: ClassVar[QBluetoothDeviceInfo.MinorHealthClass] = ...
    HealthWeightScale: ClassVar[QBluetoothDeviceInfo.MinorHealthClass] = ...
    HiFiAudioDevice: ClassVar[QBluetoothDeviceInfo.MinorAudioVideoClass] = ...
    ImageCamera: ClassVar[QBluetoothDeviceInfo.MinorImagingClass] = ...
    ImageDisplay: ClassVar[QBluetoothDeviceInfo.MinorImagingClass] = ...
    ImagePrinter: ClassVar[QBluetoothDeviceInfo.MinorImagingClass] = ...
    ImageScanner: ClassVar[QBluetoothDeviceInfo.MinorImagingClass] = ...
    ImagingDevice: ClassVar[QBluetoothDeviceInfo.MajorDeviceClass] = ...
    InformationService: ClassVar[QBluetoothDeviceInfo.ServiceClass] = ...
    JoystickPeripheral: ClassVar[QBluetoothDeviceInfo.MinorPeripheralClass] = ...
    KeyboardPeripheral: ClassVar[QBluetoothDeviceInfo.MinorPeripheralClass] = ...
    KeyboardWithPointingDevicePeripheral: ClassVar[QBluetoothDeviceInfo.MinorPeripheralClass] = ...
    LANAccessDevice: ClassVar[QBluetoothDeviceInfo.MajorDeviceClass] = ...
    LaptopComputer: ClassVar[QBluetoothDeviceInfo.MinorComputerClass] = ...
    Loudspeaker: ClassVar[QBluetoothDeviceInfo.MinorAudioVideoClass] = ...
    LowEnergyCoreConfiguration: ClassVar[QBluetoothDeviceInfo.CoreConfiguration] = ...
    Microphone: ClassVar[QBluetoothDeviceInfo.MinorAudioVideoClass] = ...
    MiscellaneousDevice: ClassVar[QBluetoothDeviceInfo.MajorDeviceClass] = ...
    NetworkDevice: ClassVar[QBluetoothDeviceInfo.MajorDeviceClass] = ...
    NetworkFullService: ClassVar[QBluetoothDeviceInfo.MinorNetworkClass] = ...
    NetworkLoadFactorFive: ClassVar[QBluetoothDeviceInfo.MinorNetworkClass] = ...
    NetworkLoadFactorFour: ClassVar[QBluetoothDeviceInfo.MinorNetworkClass] = ...
    NetworkLoadFactorOne: ClassVar[QBluetoothDeviceInfo.MinorNetworkClass] = ...
    NetworkLoadFactorSix: ClassVar[QBluetoothDeviceInfo.MinorNetworkClass] = ...
    NetworkLoadFactorThree: ClassVar[QBluetoothDeviceInfo.MinorNetworkClass] = ...
    NetworkLoadFactorTwo: ClassVar[QBluetoothDeviceInfo.MinorNetworkClass] = ...
    NetworkNoService: ClassVar[QBluetoothDeviceInfo.MinorNetworkClass] = ...
    NetworkingService: ClassVar[QBluetoothDeviceInfo.ServiceClass] = ...
    NoService: ClassVar[QBluetoothDeviceInfo.ServiceClass] = ...
    ObjectTransferService: ClassVar[QBluetoothDeviceInfo.ServiceClass] = ...
    PeripheralDevice: ClassVar[QBluetoothDeviceInfo.MajorDeviceClass] = ...
    PhoneDevice: ClassVar[QBluetoothDeviceInfo.MajorDeviceClass] = ...
    PointingDevicePeripheral: ClassVar[QBluetoothDeviceInfo.MinorPeripheralClass] = ...
    PortableAudioDevice: ClassVar[QBluetoothDeviceInfo.MinorAudioVideoClass] = ...
    PositioningService: ClassVar[QBluetoothDeviceInfo.ServiceClass] = ...
    RemoteControlPeripheral: ClassVar[QBluetoothDeviceInfo.MinorPeripheralClass] = ...
    RenderingService: ClassVar[QBluetoothDeviceInfo.ServiceClass] = ...
    SensingDevicePeripheral: ClassVar[QBluetoothDeviceInfo.MinorPeripheralClass] = ...
    ServerComputer: ClassVar[QBluetoothDeviceInfo.MinorComputerClass] = ...
    SetTopBox: ClassVar[QBluetoothDeviceInfo.MinorAudioVideoClass] = ...
    SmartPhone: ClassVar[QBluetoothDeviceInfo.MinorPhoneClass] = ...
    TelephonyService: ClassVar[QBluetoothDeviceInfo.ServiceClass] = ...
    ToyController: ClassVar[QBluetoothDeviceInfo.MinorToyClass] = ...
    ToyDevice: ClassVar[QBluetoothDeviceInfo.MajorDeviceClass] = ...
    ToyDoll: ClassVar[QBluetoothDeviceInfo.MinorToyClass] = ...
    ToyGame: ClassVar[QBluetoothDeviceInfo.MinorToyClass] = ...
    ToyRobot: ClassVar[QBluetoothDeviceInfo.MinorToyClass] = ...
    ToyVehicle: ClassVar[QBluetoothDeviceInfo.MinorToyClass] = ...
    UncategorizedAudioVideoDevice: ClassVar[QBluetoothDeviceInfo.MinorAudioVideoClass] = ...
    UncategorizedComputer: ClassVar[QBluetoothDeviceInfo.MinorComputerClass] = ...
    UncategorizedDevice: ClassVar[QBluetoothDeviceInfo.MajorDeviceClass] = ...
    UncategorizedHealthDevice: ClassVar[QBluetoothDeviceInfo.MinorHealthClass] = ...
    UncategorizedImagingDevice: ClassVar[QBluetoothDeviceInfo.MinorImagingClass] = ...
    UncategorizedMiscellaneous: ClassVar[QBluetoothDeviceInfo.MinorMiscellaneousClass] = ...
    UncategorizedPeripheral: ClassVar[QBluetoothDeviceInfo.MinorPeripheralClass] = ...
    UncategorizedPhone: ClassVar[QBluetoothDeviceInfo.MinorPhoneClass] = ...
    UncategorizedToy: ClassVar[QBluetoothDeviceInfo.MinorToyClass] = ...
    UncategorizedWearableDevice: ClassVar[QBluetoothDeviceInfo.MinorWearableClass] = ...
    UnknownCoreConfiguration: ClassVar[QBluetoothDeviceInfo.CoreConfiguration] = ...
    Vcr: ClassVar[QBluetoothDeviceInfo.MinorAudioVideoClass] = ...
    VideoCamera: ClassVar[QBluetoothDeviceInfo.MinorAudioVideoClass] = ...
    VideoConferencing: ClassVar[QBluetoothDeviceInfo.MinorAudioVideoClass] = ...
    VideoDisplayAndLoudspeaker: ClassVar[QBluetoothDeviceInfo.MinorAudioVideoClass] = ...
    VideoMonitor: ClassVar[QBluetoothDeviceInfo.MinorAudioVideoClass] = ...
    WearableComputer: ClassVar[QBluetoothDeviceInfo.MinorComputerClass] = ...
    WearableDevice: ClassVar[QBluetoothDeviceInfo.MajorDeviceClass] = ...
    WearableGlasses: ClassVar[QBluetoothDeviceInfo.MinorWearableClass] = ...
    WearableHeadsetDevice: ClassVar[QBluetoothDeviceInfo.MinorAudioVideoClass] = ...
    WearableHelmet: ClassVar[QBluetoothDeviceInfo.MinorWearableClass] = ...
    WearableJacket: ClassVar[QBluetoothDeviceInfo.MinorWearableClass] = ...
    WearablePager: ClassVar[QBluetoothDeviceInfo.MinorWearableClass] = ...
    WearableWristWatch: ClassVar[QBluetoothDeviceInfo.MinorWearableClass] = ...
    WiredModemOrVoiceGatewayPhone: ClassVar[QBluetoothDeviceInfo.MinorPhoneClass] = ...
    def address(self) -> QBluetoothAddress: ...
    def coreConfigurations(self) -> QBluetoothDeviceInfo.CoreConfigurations: ...
    def deviceUuid(self) -> QBluetoothUuid: ...
    def isCached(self) -> bool: ...
    def isValid(self) -> bool: ...
    def majorDeviceClass(self) -> QBluetoothDeviceInfo.MajorDeviceClass: ...
    @overload
    def manufacturerData(self, manufacturerId: int) -> QByteArray: ...
    @overload
    def manufacturerData(self) -> dict[int, QByteArray]: ...
    def manufacturerIds(self) -> list[int]: ...
    def minorDeviceClass(self) -> int: ...
    def name(self) -> str: ...
    def rssi(self) -> int: ...
    def serviceClasses(self) -> QBluetoothDeviceInfo.ServiceClasses: ...
    def serviceUuids(self) -> tuple[list[QBluetoothUuid], QBluetoothDeviceInfo.DataCompleteness]: ...
    def serviceUuidsCompleteness(self) -> QBluetoothDeviceInfo.DataCompleteness: ...
    def setCached(self, cached: bool) -> Any: ...
    def setCoreConfigurations(self, coreConfigs: QBluetoothDeviceInfo.CoreConfigurations | QBluetoothDeviceInfo.CoreConfiguration) -> Any: ...
    def setDeviceUuid(self, uuid: QBluetoothUuid) -> Any: ...
    def setManufacturerData(self, manufacturerId: int, data: QByteArray | bytes | bytearray) -> bool: ...
    def setRssi(self, signal: int) -> Any: ...
    @overload
    def setServiceUuids(self, uuids: Iterable[QBluetoothUuid], completeness: QBluetoothDeviceInfo.DataCompleteness) -> Any: ...
    @overload
    def setServiceUuids(self, uuids: Iterable[QBluetoothUuid]) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QBluetoothHostInfo(sip.wrapper):
    def address(self) -> QBluetoothAddress: ...
    def name(self) -> str: ...
    def setAddress(self, address: QBluetoothAddress) -> Any: ...
    def setName(self, name: str) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QBluetoothLocalDevice(PyQt5.QtCore.QObject):
    class Error(int):
        def __reduce__(self): ...

    class HostMode(int):
        def __reduce__(self): ...

    class Pairing(int):
        def __reduce__(self): ...
    AuthorizedPaired: ClassVar[QBluetoothLocalDevice.Pairing] = ...
    HostConnectable: ClassVar[QBluetoothLocalDevice.HostMode] = ...
    HostDiscoverable: ClassVar[QBluetoothLocalDevice.HostMode] = ...
    HostDiscoverableLimitedInquiry: ClassVar[QBluetoothLocalDevice.HostMode] = ...
    HostPoweredOff: ClassVar[QBluetoothLocalDevice.HostMode] = ...
    NoError: ClassVar[QBluetoothLocalDevice.Error] = ...
    Paired: ClassVar[QBluetoothLocalDevice.Pairing] = ...
    PairingError: ClassVar[QBluetoothLocalDevice.Error] = ...
    UnknownError: ClassVar[QBluetoothLocalDevice.Error] = ...
    Unpaired: ClassVar[QBluetoothLocalDevice.Pairing] = ...
    def address(self) -> QBluetoothAddress: ...
    @classmethod
    def allDevices(cls) -> list[QBluetoothHostInfo]: ...
    @classmethod
    def childEvent(cls, *args, **kwargs): ...
    @classmethod
    def connectNotify(cls, *args, **kwargs): ...
    def connectedDevices(self) -> list[QBluetoothAddress]: ...
    @classmethod
    def customEvent(cls, *args, **kwargs): ...
    def deviceConnected(self, *args, **kwargs): ...
    def deviceDisconnected(self, *args, **kwargs): ...
    @classmethod
    def disconnectNotify(cls, *args, **kwargs): ...
    def error(self, *args, **kwargs): ...
    def hostMode(self) -> QBluetoothLocalDevice.HostMode: ...
    def hostModeStateChanged(self, *args, **kwargs): ...
    @classmethod
    def isSignalConnected(cls, *args, **kwargs): ...
    def isValid(self) -> bool: ...
    def name(self) -> str: ...
    def pairingConfirmation(self, confirmation: bool) -> Any: ...
    def pairingDisplayConfirmation(self, *args, **kwargs): ...
    def pairingDisplayPinCode(self, *args, **kwargs): ...
    def pairingFinished(self, *args, **kwargs): ...
    def pairingStatus(self, address: QBluetoothAddress) -> QBluetoothLocalDevice.Pairing: ...
    def powerOn(self) -> Any: ...
    @classmethod
    def receivers(cls, *args, **kwargs): ...
    def requestPairing(self, address: QBluetoothAddress, pairing: QBluetoothLocalDevice.Pairing) -> Any: ...
    @classmethod
    def sender(cls, *args, **kwargs): ...
    @classmethod
    def senderSignalIndex(cls, *args, **kwargs): ...
    def setHostMode(self, mode: QBluetoothLocalDevice.HostMode) -> Any: ...
    @classmethod
    def timerEvent(cls, *args, **kwargs): ...

class QBluetoothServer(PyQt5.QtCore.QObject):
    class Error(int):
        def __reduce__(self): ...
    InputOutputError: ClassVar[QBluetoothServer.Error] = ...
    NoError: ClassVar[QBluetoothServer.Error] = ...
    PoweredOffError: ClassVar[QBluetoothServer.Error] = ...
    ServiceAlreadyRegisteredError: ClassVar[QBluetoothServer.Error] = ...
    UnknownError: ClassVar[QBluetoothServer.Error] = ...
    UnsupportedProtocolError: ClassVar[QBluetoothServer.Error] = ...
    @classmethod
    def childEvent(cls, *args, **kwargs): ...
    def close(self) -> Any: ...
    @classmethod
    def connectNotify(cls, *args, **kwargs): ...
    @classmethod
    def customEvent(cls, *args, **kwargs): ...
    @classmethod
    def disconnectNotify(cls, *args, **kwargs): ...
    def error(self, *args, **kwargs): ...
    def hasPendingConnections(self) -> bool: ...
    def isListening(self) -> bool: ...
    @classmethod
    def isSignalConnected(cls, *args, **kwargs): ...
    @overload
    def listen(self, address: QBluetoothAddress = ..., port: int = ...) -> bool: ...
    @overload
    def listen(self, uuid: QBluetoothUuid, serviceName: str = ...) -> QBluetoothServiceInfo: ...
    def maxPendingConnections(self) -> int: ...
    def newConnection(self, *args, **kwargs): ...
    def nextPendingConnection(self) -> QBluetoothSocket: ...
    @classmethod
    def receivers(cls, *args, **kwargs): ...
    def securityFlags(self) -> QBluetooth.SecurityFlags: ...
    @classmethod
    def sender(cls, *args, **kwargs): ...
    @classmethod
    def senderSignalIndex(cls, *args, **kwargs): ...
    def serverAddress(self) -> QBluetoothAddress: ...
    def serverPort(self) -> int: ...
    def serverType(self) -> QBluetoothServiceInfo.Protocol: ...
    def setMaxPendingConnections(self, numConnections: int) -> Any: ...
    def setSecurityFlags(self, security: QBluetooth.SecurityFlags | QBluetooth.Security) -> Any: ...
    @classmethod
    def timerEvent(cls, *args, **kwargs): ...

class QBluetoothServiceDiscoveryAgent(PyQt5.QtCore.QObject):
    class DiscoveryMode(int):
        def __reduce__(self): ...

    class Error(int):
        def __reduce__(self): ...
    FullDiscovery: ClassVar[QBluetoothServiceDiscoveryAgent.DiscoveryMode] = ...
    InputOutputError: ClassVar[QBluetoothServiceDiscoveryAgent.Error] = ...
    InvalidBluetoothAdapterError: ClassVar[QBluetoothServiceDiscoveryAgent.Error] = ...
    MinimalDiscovery: ClassVar[QBluetoothServiceDiscoveryAgent.DiscoveryMode] = ...
    NoError: ClassVar[QBluetoothServiceDiscoveryAgent.Error] = ...
    PoweredOffError: ClassVar[QBluetoothServiceDiscoveryAgent.Error] = ...
    UnknownError: ClassVar[QBluetoothServiceDiscoveryAgent.Error] = ...
    def canceled(self, *args, **kwargs): ...
    @classmethod
    def childEvent(cls, *args, **kwargs): ...
    def clear(self) -> Any: ...
    @classmethod
    def connectNotify(cls, *args, **kwargs): ...
    @classmethod
    def customEvent(cls, *args, **kwargs): ...
    @classmethod
    def disconnectNotify(cls, *args, **kwargs): ...
    def discoveredServices(self) -> list[QBluetoothServiceInfo]: ...
    def error(self, *args, **kwargs): ...
    def errorString(self) -> str: ...
    def finished(self, *args, **kwargs): ...
    def isActive(self) -> bool: ...
    @classmethod
    def isSignalConnected(cls, *args, **kwargs): ...
    @classmethod
    def receivers(cls, *args, **kwargs): ...
    def remoteAddress(self) -> QBluetoothAddress: ...
    @classmethod
    def sender(cls, *args, **kwargs): ...
    @classmethod
    def senderSignalIndex(cls, *args, **kwargs): ...
    def serviceDiscovered(self, *args, **kwargs): ...
    def setRemoteAddress(self, address: QBluetoothAddress) -> bool: ...
    @overload
    def setUuidFilter(self, uuids: Iterable[QBluetoothUuid]) -> Any: ...
    @overload
    def setUuidFilter(self, uuid: QBluetoothUuid) -> Any: ...
    def start(self, mode: QBluetoothServiceDiscoveryAgent.DiscoveryMode = ...) -> Any: ...
    def stop(self) -> Any: ...
    @classmethod
    def timerEvent(cls, *args, **kwargs): ...
    def uuidFilter(self) -> list[QBluetoothUuid]: ...

class QBluetoothServiceInfo(sip.wrapper):
    class AttributeId(int):
        def __reduce__(self): ...

    class Protocol(int):
        def __reduce__(self): ...
    AdditionalProtocolDescriptorList: ClassVar[QBluetoothServiceInfo.AttributeId] = ...
    BluetoothProfileDescriptorList: ClassVar[QBluetoothServiceInfo.AttributeId] = ...
    BrowseGroupList: ClassVar[QBluetoothServiceInfo.AttributeId] = ...
    ClientExecutableUrl: ClassVar[QBluetoothServiceInfo.AttributeId] = ...
    DocumentationUrl: ClassVar[QBluetoothServiceInfo.AttributeId] = ...
    IconUrl: ClassVar[QBluetoothServiceInfo.AttributeId] = ...
    L2capProtocol: ClassVar[QBluetoothServiceInfo.Protocol] = ...
    LanguageBaseAttributeIdList: ClassVar[QBluetoothServiceInfo.AttributeId] = ...
    PrimaryLanguageBase: ClassVar[QBluetoothServiceInfo.AttributeId] = ...
    ProtocolDescriptorList: ClassVar[QBluetoothServiceInfo.AttributeId] = ...
    RfcommProtocol: ClassVar[QBluetoothServiceInfo.Protocol] = ...
    ServiceAvailability: ClassVar[QBluetoothServiceInfo.AttributeId] = ...
    ServiceClassIds: ClassVar[QBluetoothServiceInfo.AttributeId] = ...
    ServiceDescription: ClassVar[QBluetoothServiceInfo.AttributeId] = ...
    ServiceId: ClassVar[QBluetoothServiceInfo.AttributeId] = ...
    ServiceInfoTimeToLive: ClassVar[QBluetoothServiceInfo.AttributeId] = ...
    ServiceName: ClassVar[QBluetoothServiceInfo.AttributeId] = ...
    ServiceProvider: ClassVar[QBluetoothServiceInfo.AttributeId] = ...
    ServiceRecordHandle: ClassVar[QBluetoothServiceInfo.AttributeId] = ...
    ServiceRecordState: ClassVar[QBluetoothServiceInfo.AttributeId] = ...
    UnknownProtocol: ClassVar[QBluetoothServiceInfo.Protocol] = ...
    def attribute(self, attributeId: int) -> Any: ...
    def attributes(self) -> list[int]: ...
    def contains(self, attributeId: int) -> bool: ...
    def device(self) -> QBluetoothDeviceInfo: ...
    def isComplete(self) -> bool: ...
    def isRegistered(self) -> bool: ...
    def isValid(self) -> bool: ...
    def protocolDescriptor(self, protocol: QBluetoothUuid.ProtocolUuid) -> list[Any]: ...
    def protocolServiceMultiplexer(self) -> int: ...
    def registerService(self, localAdapter: QBluetoothAddress = ...) -> bool: ...
    def removeAttribute(self, attributeId: int) -> Any: ...
    def serverChannel(self) -> int: ...
    def serviceAvailability(self) -> int: ...
    def serviceClassUuids(self) -> list[QBluetoothUuid]: ...
    def serviceDescription(self) -> str: ...
    def serviceName(self) -> str: ...
    def serviceProvider(self) -> str: ...
    def serviceUuid(self) -> QBluetoothUuid: ...
    @overload
    def setAttribute(self, attributeId: int, value: QBluetoothUuid) -> Any: ...
    @overload
    def setAttribute(self, attributeId: int, value: Iterable[Any]) -> Any: ...
    @overload
    def setAttribute(self, attributeId: int, value: Any) -> Any: ...
    def setDevice(self, info: QBluetoothDeviceInfo) -> Any: ...
    def setServiceAvailability(self, availability: int) -> Any: ...
    def setServiceDescription(self, description: str) -> Any: ...
    def setServiceName(self, name: str) -> Any: ...
    def setServiceProvider(self, provider: str) -> Any: ...
    def setServiceUuid(self, uuid: QBluetoothUuid) -> Any: ...
    def socketProtocol(self) -> QBluetoothServiceInfo.Protocol: ...
    def unregisterService(self) -> bool: ...

class QBluetoothSocket(PyQt5.QtCore.QIODevice):
    class SocketError(int):
        def __reduce__(self): ...

    class SocketState(int):
        def __reduce__(self): ...
    BoundState: ClassVar[QBluetoothSocket.SocketState] = ...
    ClosingState: ClassVar[QBluetoothSocket.SocketState] = ...
    ConnectedState: ClassVar[QBluetoothSocket.SocketState] = ...
    ConnectingState: ClassVar[QBluetoothSocket.SocketState] = ...
    HostNotFoundError: ClassVar[QBluetoothSocket.SocketError] = ...
    ListeningState: ClassVar[QBluetoothSocket.SocketState] = ...
    NetworkError: ClassVar[QBluetoothSocket.SocketError] = ...
    NoSocketError: ClassVar[QBluetoothSocket.SocketError] = ...
    OperationError: ClassVar[QBluetoothSocket.SocketError] = ...
    RemoteHostClosedError: ClassVar[QBluetoothSocket.SocketError] = ...
    ServiceLookupState: ClassVar[QBluetoothSocket.SocketState] = ...
    ServiceNotFoundError: ClassVar[QBluetoothSocket.SocketError] = ...
    UnconnectedState: ClassVar[QBluetoothSocket.SocketState] = ...
    UnknownSocketError: ClassVar[QBluetoothSocket.SocketError] = ...
    UnsupportedProtocolError: ClassVar[QBluetoothSocket.SocketError] = ...
    def abort(self) -> Any: ...
    def bytesAvailable(self) -> int: ...
    def bytesToWrite(self) -> int: ...
    def canReadLine(self) -> bool: ...
    @classmethod
    def childEvent(cls, *args, **kwargs): ...
    def close(self) -> Any: ...
    @classmethod
    def connectNotify(cls, *args, **kwargs): ...
    @overload
    def connectToService(self, service: QBluetoothServiceInfo, mode: QIODevice.OpenMode | QIODevice.OpenModeFlag = ...) -> Any: ...
    @overload
    def connectToService(self, address: QBluetoothAddress, uuid: QBluetoothUuid, mode: QIODevice.OpenMode | QIODevice.OpenModeFlag = ...) -> Any: ...
    @overload
    def connectToService(self, address: QBluetoothAddress, port: int, mode: QIODevice.OpenMode | QIODevice.OpenModeFlag = ...) -> Any: ...
    def connected(self, *args, **kwargs): ...
    @classmethod
    def customEvent(cls, *args, **kwargs): ...
    def disconnectFromService(self) -> Any: ...
    @classmethod
    def disconnectNotify(cls, *args, **kwargs): ...
    def disconnected(self, *args, **kwargs): ...
    def doDeviceDiscovery(self, service: QBluetoothServiceInfo, openMode: QIODevice.OpenMode | QIODevice.OpenModeFlag) -> Any: ...
    def error(self, *args, **kwargs): ...
    def errorString(self) -> str: ...
    def isSequential(self) -> bool: ...
    @classmethod
    def isSignalConnected(cls, *args, **kwargs): ...
    def localAddress(self) -> QBluetoothAddress: ...
    def localName(self) -> str: ...
    def localPort(self) -> int: ...
    def peerAddress(self) -> QBluetoothAddress: ...
    def peerName(self) -> str: ...
    def peerPort(self) -> int: ...
    def preferredSecurityFlags(self) -> QBluetooth.SecurityFlags: ...
    def readData(self, maxlen: int) -> bytes: ...
    @classmethod
    def readLineData(cls, *args, **kwargs): ...
    @classmethod
    def receivers(cls, *args, **kwargs): ...
    @classmethod
    def sender(cls, *args, **kwargs): ...
    @classmethod
    def senderSignalIndex(cls, *args, **kwargs): ...
    @classmethod
    def setErrorString(cls, *args, **kwargs): ...
    @classmethod
    def setOpenMode(cls, *args, **kwargs): ...
    def setPreferredSecurityFlags(self, flags: QBluetooth.SecurityFlags | QBluetooth.Security) -> Any: ...
    def setSocketDescriptor(self, socketDescriptor: int, socketType: QBluetoothServiceInfo.Protocol, state: QBluetoothSocket.SocketState = ..., mode: QIODevice.OpenMode | QIODevice.OpenModeFlag = ...) -> bool: ...
    def setSocketError(self, error: QBluetoothSocket.SocketError) -> Any: ...
    def setSocketState(self, state: QBluetoothSocket.SocketState) -> Any: ...
    def socketDescriptor(self) -> int: ...
    def socketType(self) -> QBluetoothServiceInfo.Protocol: ...
    def state(self) -> QBluetoothSocket.SocketState: ...
    def stateChanged(self, *args, **kwargs): ...
    @classmethod
    def timerEvent(cls, *args, **kwargs): ...
    def writeData(self, data: PyQt5.sip.array[bytes]) -> int: ...

class QBluetoothTransferManager(PyQt5.QtCore.QObject):
    @classmethod
    def childEvent(cls, *args, **kwargs): ...
    @classmethod
    def connectNotify(cls, *args, **kwargs): ...
    @classmethod
    def customEvent(cls, *args, **kwargs): ...
    @classmethod
    def disconnectNotify(cls, *args, **kwargs): ...
    def finished(self, *args, **kwargs): ...
    @classmethod
    def isSignalConnected(cls, *args, **kwargs): ...
    def put(self, request: QBluetoothTransferRequest, data: QIODevice) -> QBluetoothTransferReply: ...
    @classmethod
    def receivers(cls, *args, **kwargs): ...
    @classmethod
    def sender(cls, *args, **kwargs): ...
    @classmethod
    def senderSignalIndex(cls, *args, **kwargs): ...
    @classmethod
    def timerEvent(cls, *args, **kwargs): ...

class QBluetoothTransferReply(PyQt5.QtCore.QObject):
    class TransferError(int):
        def __reduce__(self): ...
    FileNotFoundError: ClassVar[QBluetoothTransferReply.TransferError] = ...
    HostNotFoundError: ClassVar[QBluetoothTransferReply.TransferError] = ...
    IODeviceNotReadableError: ClassVar[QBluetoothTransferReply.TransferError] = ...
    NoError: ClassVar[QBluetoothTransferReply.TransferError] = ...
    ResourceBusyError: ClassVar[QBluetoothTransferReply.TransferError] = ...
    SessionError: ClassVar[QBluetoothTransferReply.TransferError] = ...
    UnknownError: ClassVar[QBluetoothTransferReply.TransferError] = ...
    UserCanceledTransferError: ClassVar[QBluetoothTransferReply.TransferError] = ...
    def abort(self) -> Any: ...
    @classmethod
    def childEvent(cls, *args, **kwargs): ...
    @classmethod
    def connectNotify(cls, *args, **kwargs): ...
    @classmethod
    def customEvent(cls, *args, **kwargs): ...
    @classmethod
    def disconnectNotify(cls, *args, **kwargs): ...
    def error(self, *args, **kwargs): ...
    def errorString(self) -> str: ...
    def finished(self, *args, **kwargs): ...
    def isFinished(self) -> bool: ...
    def isRunning(self) -> bool: ...
    @classmethod
    def isSignalConnected(cls, *args, **kwargs): ...
    def manager(self) -> QBluetoothTransferManager: ...
    @classmethod
    def receivers(cls, *args, **kwargs): ...
    def request(self) -> QBluetoothTransferRequest: ...
    @classmethod
    def sender(cls, *args, **kwargs): ...
    @classmethod
    def senderSignalIndex(cls, *args, **kwargs): ...
    def setManager(self, manager: QBluetoothTransferManager) -> Any: ...
    def setRequest(self, request: QBluetoothTransferRequest) -> Any: ...
    @classmethod
    def timerEvent(cls, *args, **kwargs): ...
    def transferProgress(self, *args, **kwargs): ...

class QBluetoothTransferRequest(sip.wrapper):
    class Attribute(int):
        def __reduce__(self): ...
    DescriptionAttribute: ClassVar[QBluetoothTransferRequest.Attribute] = ...
    LengthAttribute: ClassVar[QBluetoothTransferRequest.Attribute] = ...
    NameAttribute: ClassVar[QBluetoothTransferRequest.Attribute] = ...
    TimeAttribute: ClassVar[QBluetoothTransferRequest.Attribute] = ...
    TypeAttribute: ClassVar[QBluetoothTransferRequest.Attribute] = ...
    def address(self) -> QBluetoothAddress: ...
    def attribute(self, code: QBluetoothTransferRequest.Attribute, defaultValue: Any = ...) -> Any: ...
    def setAttribute(self, code: QBluetoothTransferRequest.Attribute, value: Any) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QBluetoothUuid(PyQt5.QtCore.QUuid):
    class CharacteristicType(int):
        def __reduce__(self): ...

    class DescriptorType(int):
        def __reduce__(self): ...

    class ProtocolUuid(int):
        def __reduce__(self): ...

    class ServiceClassUuid(int):
        def __reduce__(self): ...
    AV_RemoteControl: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    AV_RemoteControlController: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    AV_RemoteControlTarget: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    AdvancedAudioDistribution: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    AerobicHeartRateLowerLimit: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    AerobicHeartRateUpperLimit: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    AerobicThreshold: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Age: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    AlertCategoryID: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    AlertCategoryIDBitMask: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    AlertLevel: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    AlertNotificationControlPoint: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    AlertNotificationService: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    AlertStatus: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    AnaerobicHeartRateLowerLimit: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    AnaerobicHeartRateUpperLimit: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    AnaerobicThreshold: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    ApparentWindDirection: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    ApparentWindSpeed: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Appearance: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Att: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    AudioSink: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    AudioSource: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    Avctp: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    Avdtp: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    BarometricPressureTrend: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    BasicImage: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    BasicPrinting: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    BatteryLevel: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    BatteryService: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    BloodPressure: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    BloodPressureFeature: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    BloodPressureMeasurement: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Bnep: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    BodyComposition: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    BodyCompositionFeature: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    BodyCompositionMeasurement: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    BodySensorLocation: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    BondManagement: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    BootKeyboardInputReport: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    BootKeyboardOutputReport: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    BootMouseInputReport: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    BrowseGroupDescriptor: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    CSCFeature: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    CSCMeasurement: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    CharacteristicAggregateFormat: ClassVar[QBluetoothUuid.DescriptorType] = ...
    CharacteristicExtendedProperties: ClassVar[QBluetoothUuid.DescriptorType] = ...
    CharacteristicPresentationFormat: ClassVar[QBluetoothUuid.DescriptorType] = ...
    CharacteristicUserDescription: ClassVar[QBluetoothUuid.DescriptorType] = ...
    ClientCharacteristicConfiguration: ClassVar[QBluetoothUuid.DescriptorType] = ...
    Cmtp: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    ContinuousGlucoseMonitoring: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    CurrentTime: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    CurrentTimeService: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    CyclingPower: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    CyclingPowerControlPoint: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    CyclingPowerFeature: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    CyclingPowerMeasurement: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    CyclingPowerVector: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    CyclingSpeedAndCadence: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    DSTOffset: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    DatabaseChangeIncrement: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    DateOfBirth: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    DateOfThresholdAssessment: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    DateTime: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    DayDateTime: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    DayOfWeek: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    DescriptorValueChanged: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    DeviceInformation: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    DeviceName: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    DewPoint: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    DialupNetworking: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    DirectPrinting: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    DirectPrintingReferenceObjectsService: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    Display3D: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    Elevation: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    EmailAddress: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    EnvironmentalSensing: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    EnvironmentalSensingConfiguration: ClassVar[QBluetoothUuid.DescriptorType] = ...
    EnvironmentalSensingMeasurement: ClassVar[QBluetoothUuid.DescriptorType] = ...
    EnvironmentalSensingTriggerSetting: ClassVar[QBluetoothUuid.DescriptorType] = ...
    ExactTime256: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    ExternalReportReference: ClassVar[QBluetoothUuid.DescriptorType] = ...
    FatBurnHeartRateLowerLimit: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    FatBurnHeartRateUpperLimit: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    FirmwareRevisionString: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    FirstName: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    FiveZoneHeartRateLimits: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Ftp: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    GN: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    GNSS: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    GNSSServer: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    Gender: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    GenericAccess: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    GenericAttribute: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    GenericAudio: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    GenericFileTransfer: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    GenericNetworking: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    GenericTelephony: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    Glasses3D: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    Glucose: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    GlucoseFeature: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    GlucoseMeasurement: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    GlucoseMeasurementContext: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    GustFactor: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    HCRPrint: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    HCRScan: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    HDP: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    HDPSink: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    HDPSource: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    HIDControlPoint: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    HIDInformation: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Handsfree: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    HandsfreeAudioGateway: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    HardcopyCableReplacement: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    HardcopyControlChannel: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    HardcopyDataChannel: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    HardcopyNotification: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    HardwareRevisionString: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Headset: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    HeadsetAG: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    HeadsetHS: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    HealthThermometer: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    HeartRate: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    HeartRateControlPoint: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    HeartRateMax: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    HeartRateMeasurement: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    HeatIndex: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Height: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Hidp: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    HipCircumference: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Http: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    HumanInterfaceDevice: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    HumanInterfaceDeviceService: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    Humidity: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    IEEE1107320601RegulatoryCertificationDataList: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    ImagingAutomaticArchive: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    ImagingReferenceObjects: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    ImagingResponder: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    ImmediateAlert: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    IntermediateCuffPressure: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    IntermediateTemperature: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Ip: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    IrMCSync: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    IrMCSyncCommand: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    Irradiance: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    L2cap: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    LANAccessUsingPPP: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    LNControlPoint: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    LNFeature: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Language: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    LastName: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    LinkLoss: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    LocalTimeInformation: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    LocationAndNavigation: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    LocationAndSpeed: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    MPSProfile: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    MPSService: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    MagneticDeclination: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    MagneticFluxDensity2D: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    MagneticFluxDensity3D: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    ManufacturerNameString: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    MaximumRecommendedHeartRate: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    McapControlChannel: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    McapDataChannel: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    MeasurementInterval: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    MessageAccessProfile: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    MessageAccessServer: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    MessageNotificationServer: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    ModelNumberString: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    NAP: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    Navigation: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    NewAlert: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    NextDSTChangeService: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    OBEXFileTransfer: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    Obex: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    ObexObjectPush: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    PANU: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    PeripheralPreferredConnectionParameters: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    PeripheralPrivacyFlag: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    PhoneAlertStatusService: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    PhonebookAccess: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    PhonebookAccessPCE: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    PhonebookAccessPSE: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    PnPID: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    PnPInformation: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    PollenConcentration: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    PositionQuality: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Pressure: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    PrintingStatus: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    ProtocolMode: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    PublicBrowseGroup: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    RSCFeature: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    RSCMeasurement: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Rainfall: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    ReconnectionAddress: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    RecordAccessControlPoint: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    ReferencePrinting: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    ReferenceTimeInformation: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    ReferenceTimeUpdateService: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    ReflectedUI: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    Report: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    ReportMap: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    ReportReference: ClassVar[QBluetoothUuid.DescriptorType] = ...
    RestingHeartRate: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Rfcomm: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    RingerControlPoint: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    RingerSetting: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    RunningSpeedAndCadence: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    SCControlPoint: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    SIMAccess: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    ScanIntervalWindow: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    ScanParameters: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    ScanRefresh: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Sdp: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    SensorLocation: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    SerialNumberString: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    SerialPort: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    ServerCharacteristicConfiguration: ClassVar[QBluetoothUuid.DescriptorType] = ...
    ServiceChanged: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    ServiceDiscoveryServer: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    SoftwareRevisionString: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    SportTypeForAerobicAnaerobicThresholds: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    SupportedNewAlertCategory: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    SupportedUnreadAlertCategory: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Synchronization3D: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    SystemID: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Tcp: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    TcsAt: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    TcsBin: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    Temperature: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    TemperatureMeasurement: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    TemperatureType: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    ThreeZoneHeartRateLimits: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    TimeAccuracy: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    TimeSource: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    TimeUpdateControlPoint: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    TimeUpdateState: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    TimeWithDST: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    TimeZone: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    TrueWindDirection: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    TrueWindSpeed: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    TwoZoneHeartRateLimits: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    TxPower: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    TxPowerLevel: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    UVIndex: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    UdiCPlain: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    Udp: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    UnknownDescriptorType: ClassVar[QBluetoothUuid.DescriptorType] = ...
    UnreadAlertStatus: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Upnp: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    UserControlPoint: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    UserData: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    UserIndex: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    VO2Max: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    ValidRange: ClassVar[QBluetoothUuid.DescriptorType] = ...
    VideoDistribution: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    VideoSink: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    VideoSource: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    WaistCircumference: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Weight: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    WeightMeasurement: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    WeightScale: ClassVar[QBluetoothUuid.ServiceClassUuid] = ...
    WeightScaleFeature: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    WindChill: ClassVar[QBluetoothUuid.CharacteristicType] = ...
    Wsp: ClassVar[QBluetoothUuid.ProtocolUuid] = ...
    @classmethod
    def characteristicToString(cls, uuid: QBluetoothUuid.CharacteristicType) -> str: ...
    @classmethod
    def descriptorToString(cls, uuid: QBluetoothUuid.DescriptorType) -> str: ...
    def minimumSize(self) -> int: ...
    @classmethod
    def protocolToString(cls, uuid: QBluetoothUuid.ProtocolUuid) -> str: ...
    @classmethod
    def serviceClassToString(cls, uuid: QBluetoothUuid.ServiceClassUuid) -> str: ...
    def toUInt128(self) -> tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]: ...
    def toUInt16(self) -> tuple[int, bool]: ...
    def toUInt32(self) -> tuple[int, bool]: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QLowEnergyAdvertisingData(sip.wrapper):
    class Discoverability(int):
        def __reduce__(self): ...
    DiscoverabilityGeneral: ClassVar[QLowEnergyAdvertisingData.Discoverability] = ...
    DiscoverabilityLimited: ClassVar[QLowEnergyAdvertisingData.Discoverability] = ...
    DiscoverabilityNone: ClassVar[QLowEnergyAdvertisingData.Discoverability] = ...
    def discoverability(self) -> QLowEnergyAdvertisingData.Discoverability: ...
    def includePowerLevel(self) -> bool: ...
    @classmethod
    def invalidManufacturerId(cls) -> int: ...
    def localName(self) -> str: ...
    def manufacturerData(self) -> QByteArray: ...
    def manufacturerId(self) -> int: ...
    def rawData(self) -> QByteArray: ...
    def services(self) -> list[QBluetoothUuid]: ...
    def setDiscoverability(self, mode: QLowEnergyAdvertisingData.Discoverability) -> Any: ...
    def setIncludePowerLevel(self, doInclude: bool) -> Any: ...
    def setLocalName(self, name: str) -> Any: ...
    def setManufacturerData(self, id: int, data: QByteArray | bytes | bytearray) -> Any: ...
    def setRawData(self, data: QByteArray | bytes | bytearray) -> Any: ...
    def setServices(self, services: Iterable[QBluetoothUuid]) -> Any: ...
    def swap(self, other: QLowEnergyAdvertisingData) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QLowEnergyAdvertisingParameters(sip.wrapper):
    class AddressInfo(sip.wrapper):
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...

    class FilterPolicy(int):
        def __reduce__(self): ...

    class Mode(int):
        def __reduce__(self): ...
    AdvInd: ClassVar[QLowEnergyAdvertisingParameters.Mode] = ...
    AdvNonConnInd: ClassVar[QLowEnergyAdvertisingParameters.Mode] = ...
    AdvScanInd: ClassVar[QLowEnergyAdvertisingParameters.Mode] = ...
    IgnoreWhiteList: ClassVar[QLowEnergyAdvertisingParameters.FilterPolicy] = ...
    UseWhiteListForConnecting: ClassVar[QLowEnergyAdvertisingParameters.FilterPolicy] = ...
    UseWhiteListForScanning: ClassVar[QLowEnergyAdvertisingParameters.FilterPolicy] = ...
    UseWhiteListForScanningAndConnecting: ClassVar[QLowEnergyAdvertisingParameters.FilterPolicy] = ...
    def filterPolicy(self) -> QLowEnergyAdvertisingParameters.FilterPolicy: ...
    def maximumInterval(self) -> int: ...
    def minimumInterval(self) -> int: ...
    def mode(self) -> QLowEnergyAdvertisingParameters.Mode: ...
    def setInterval(self, minimum: int, maximum: int) -> Any: ...
    def setMode(self, mode: QLowEnergyAdvertisingParameters.Mode) -> Any: ...
    def setWhiteList(self, whiteList: Iterable[QLowEnergyAdvertisingParameters.AddressInfo], policy: QLowEnergyAdvertisingParameters.FilterPolicy) -> Any: ...
    def swap(self, other: QLowEnergyAdvertisingParameters) -> Any: ...
    def whiteList(self) -> list[QLowEnergyAdvertisingParameters.AddressInfo]: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QLowEnergyCharacteristic(sip.wrapper):
    class PropertyType(int):
        def __or__(self, other): ...
        def __reduce__(self): ...
        def __ror__(self, other): ...

    class PropertyTypes(sip.wrapper):
        def __and__(self, other): ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __iand__(self, other): ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __invert__(self): ...
        def __ior__(self, other): ...
        def __ixor__(self, other): ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other): ...
        def __rand__(self, other): ...
        def __ror__(self, other): ...
        def __rxor__(self, other): ...
        def __xor__(self, other): ...
    Broadcasting: ClassVar[QLowEnergyCharacteristic.PropertyType] = ...
    ExtendedProperty: ClassVar[QLowEnergyCharacteristic.PropertyType] = ...
    Indicate: ClassVar[QLowEnergyCharacteristic.PropertyType] = ...
    Notify: ClassVar[QLowEnergyCharacteristic.PropertyType] = ...
    Read: ClassVar[QLowEnergyCharacteristic.PropertyType] = ...
    Unknown: ClassVar[QLowEnergyCharacteristic.PropertyType] = ...
    Write: ClassVar[QLowEnergyCharacteristic.PropertyType] = ...
    WriteNoResponse: ClassVar[QLowEnergyCharacteristic.PropertyType] = ...
    WriteSigned: ClassVar[QLowEnergyCharacteristic.PropertyType] = ...
    def descriptor(self, uuid: QBluetoothUuid) -> QLowEnergyDescriptor: ...
    def descriptors(self) -> list[QLowEnergyDescriptor]: ...
    def handle(self) -> int: ...
    def isValid(self) -> bool: ...
    def name(self) -> str: ...
    def properties(self) -> QLowEnergyCharacteristic.PropertyTypes: ...
    def uuid(self) -> QBluetoothUuid: ...
    def value(self) -> QByteArray: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QLowEnergyCharacteristicData(sip.wrapper):
    def addDescriptor(self, descriptor: QLowEnergyDescriptorData) -> Any: ...
    def descriptors(self) -> list[QLowEnergyDescriptorData]: ...
    def isValid(self) -> bool: ...
    def maximumValueLength(self) -> int: ...
    def minimumValueLength(self) -> int: ...
    def properties(self) -> QLowEnergyCharacteristic.PropertyTypes: ...
    def readConstraints(self) -> QBluetooth.AttAccessConstraints: ...
    def setDescriptors(self, descriptors: Iterable[QLowEnergyDescriptorData]) -> Any: ...
    def setProperties(self, properties: QLowEnergyCharacteristic.PropertyTypes | QLowEnergyCharacteristic.PropertyType) -> Any: ...
    def setReadConstraints(self, constraints: QBluetooth.AttAccessConstraints | QBluetooth.AttAccessConstraint) -> Any: ...
    def setUuid(self, uuid: QBluetoothUuid) -> Any: ...
    def setValue(self, value: QByteArray | bytes | bytearray) -> Any: ...
    def setValueLength(self, minimum: int, maximum: int) -> Any: ...
    def setWriteConstraints(self, constraints: QBluetooth.AttAccessConstraints | QBluetooth.AttAccessConstraint) -> Any: ...
    def swap(self, other: QLowEnergyCharacteristicData) -> Any: ...
    def uuid(self) -> QBluetoothUuid: ...
    def value(self) -> QByteArray: ...
    def writeConstraints(self) -> QBluetooth.AttAccessConstraints: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QLowEnergyConnectionParameters(sip.wrapper):
    def latency(self) -> int: ...
    def maximumInterval(self) -> float: ...
    def minimumInterval(self) -> float: ...
    def setIntervalRange(self, minimum: float, maximum: float) -> Any: ...
    def setLatency(self, latency: int) -> Any: ...
    def setSupervisionTimeout(self, timeout: int) -> Any: ...
    def supervisionTimeout(self) -> int: ...
    def swap(self, other: QLowEnergyConnectionParameters) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QLowEnergyController(PyQt5.QtCore.QObject):
    class ControllerState(int):
        def __reduce__(self): ...

    class Error(int):
        def __reduce__(self): ...

    class RemoteAddressType(int):
        def __reduce__(self): ...

    class Role(int):
        def __reduce__(self): ...
    AdvertisingError: ClassVar[QLowEnergyController.Error] = ...
    AdvertisingState: ClassVar[QLowEnergyController.ControllerState] = ...
    AuthorizationError: ClassVar[QLowEnergyController.Error] = ...
    CentralRole: ClassVar[QLowEnergyController.Role] = ...
    ClosingState: ClassVar[QLowEnergyController.ControllerState] = ...
    ConnectedState: ClassVar[QLowEnergyController.ControllerState] = ...
    ConnectingState: ClassVar[QLowEnergyController.ControllerState] = ...
    ConnectionError: ClassVar[QLowEnergyController.Error] = ...
    DiscoveredState: ClassVar[QLowEnergyController.ControllerState] = ...
    DiscoveringState: ClassVar[QLowEnergyController.ControllerState] = ...
    InvalidBluetoothAdapterError: ClassVar[QLowEnergyController.Error] = ...
    NetworkError: ClassVar[QLowEnergyController.Error] = ...
    NoError: ClassVar[QLowEnergyController.Error] = ...
    PeripheralRole: ClassVar[QLowEnergyController.Role] = ...
    PublicAddress: ClassVar[QLowEnergyController.RemoteAddressType] = ...
    RandomAddress: ClassVar[QLowEnergyController.RemoteAddressType] = ...
    RemoteHostClosedError: ClassVar[QLowEnergyController.Error] = ...
    UnconnectedState: ClassVar[QLowEnergyController.ControllerState] = ...
    UnknownError: ClassVar[QLowEnergyController.Error] = ...
    UnknownRemoteDeviceError: ClassVar[QLowEnergyController.Error] = ...
    def addService(self, service: QLowEnergyServiceData, parent: QObject | None = ...) -> QLowEnergyService: ...
    @classmethod
    def childEvent(cls, *args, **kwargs): ...
    @classmethod
    def connectNotify(cls, *args, **kwargs): ...
    def connectToDevice(self) -> Any: ...
    def connected(self, *args, **kwargs): ...
    def connectionUpdated(self, *args, **kwargs): ...
    @overload
    @classmethod
    def createCentral(cls, remoteDevice: QBluetoothDeviceInfo, parent: QObject | None = ...) -> QLowEnergyController: ...
    @overload
    @classmethod
    def createCentral(cls, remoteDevice: QBluetoothAddress, localDevice: QBluetoothAddress, parent: QObject | None = ...) -> QLowEnergyController: ...
    @classmethod
    def createPeripheral(cls, parent: QObject | None = ...) -> QLowEnergyController: ...
    def createServiceObject(self, service: QBluetoothUuid, parent: QObject | None = ...) -> QLowEnergyService: ...
    @classmethod
    def customEvent(cls, *args, **kwargs): ...
    def disconnectFromDevice(self) -> Any: ...
    @classmethod
    def disconnectNotify(cls, *args, **kwargs): ...
    def disconnected(self, *args, **kwargs): ...
    def discoverServices(self) -> Any: ...
    def discoveryFinished(self, *args, **kwargs): ...
    def error(self, *args, **kwargs): ...
    def errorString(self) -> str: ...
    @classmethod
    def isSignalConnected(cls, *args, **kwargs): ...
    def localAddress(self) -> QBluetoothAddress: ...
    @classmethod
    def receivers(cls, *args, **kwargs): ...
    def remoteAddress(self) -> QBluetoothAddress: ...
    def remoteAddressType(self) -> QLowEnergyController.RemoteAddressType: ...
    def remoteDeviceUuid(self) -> QBluetoothUuid: ...
    def remoteName(self) -> str: ...
    def requestConnectionUpdate(self, parameters: QLowEnergyConnectionParameters) -> Any: ...
    def role(self) -> QLowEnergyController.Role: ...
    @classmethod
    def sender(cls, *args, **kwargs): ...
    @classmethod
    def senderSignalIndex(cls, *args, **kwargs): ...
    def serviceDiscovered(self, *args, **kwargs): ...
    def services(self) -> list[QBluetoothUuid]: ...
    def setRemoteAddressType(self, type: QLowEnergyController.RemoteAddressType) -> Any: ...
    def startAdvertising(self, parameters: QLowEnergyAdvertisingParameters, advertisingData: QLowEnergyAdvertisingData, scanResponseData: QLowEnergyAdvertisingData = ...) -> Any: ...
    def state(self) -> QLowEnergyController.ControllerState: ...
    def stateChanged(self, *args, **kwargs): ...
    def stopAdvertising(self) -> Any: ...
    @classmethod
    def timerEvent(cls, *args, **kwargs): ...

class QLowEnergyDescriptor(sip.wrapper):
    def handle(self) -> int: ...
    def isValid(self) -> bool: ...
    def name(self) -> str: ...
    def type(self) -> QBluetoothUuid.DescriptorType: ...
    def uuid(self) -> QBluetoothUuid: ...
    def value(self) -> QByteArray: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QLowEnergyDescriptorData(sip.wrapper):
    def isReadable(self) -> bool: ...
    def isValid(self) -> bool: ...
    def isWritable(self) -> bool: ...
    def readConstraints(self) -> QBluetooth.AttAccessConstraints: ...
    def setReadPermissions(self, readable: bool, constraints: QBluetooth.AttAccessConstraints | QBluetooth.AttAccessConstraint = ...) -> Any: ...
    def setUuid(self, uuid: QBluetoothUuid) -> Any: ...
    def setValue(self, value: QByteArray | bytes | bytearray) -> Any: ...
    def setWritePermissions(self, writable: bool, constraints: QBluetooth.AttAccessConstraints | QBluetooth.AttAccessConstraint = ...) -> Any: ...
    def swap(self, other: QLowEnergyDescriptorData) -> Any: ...
    def uuid(self) -> QBluetoothUuid: ...
    def value(self) -> QByteArray: ...
    def writeConstraints(self) -> QBluetooth.AttAccessConstraints: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QLowEnergyService(PyQt5.QtCore.QObject):
    class ServiceError(int):
        def __reduce__(self): ...

    class ServiceState(int):
        def __reduce__(self): ...

    class ServiceType(int):
        def __or__(self, other): ...
        def __reduce__(self): ...
        def __ror__(self, other): ...

    class ServiceTypes(sip.wrapper):
        def __and__(self, other): ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __iand__(self, other): ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __invert__(self): ...
        def __ior__(self, other): ...
        def __ixor__(self, other): ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other): ...
        def __rand__(self, other): ...
        def __ror__(self, other): ...
        def __rxor__(self, other): ...
        def __xor__(self, other): ...

    class WriteMode(int):
        def __reduce__(self): ...
    CharacteristicReadError: ClassVar[QLowEnergyService.ServiceError] = ...
    CharacteristicWriteError: ClassVar[QLowEnergyService.ServiceError] = ...
    DescriptorReadError: ClassVar[QLowEnergyService.ServiceError] = ...
    DescriptorWriteError: ClassVar[QLowEnergyService.ServiceError] = ...
    DiscoveringServices: ClassVar[QLowEnergyService.ServiceState] = ...
    DiscoveryRequired: ClassVar[QLowEnergyService.ServiceState] = ...
    IncludedService: ClassVar[QLowEnergyService.ServiceType] = ...
    InvalidService: ClassVar[QLowEnergyService.ServiceState] = ...
    LocalService: ClassVar[QLowEnergyService.ServiceState] = ...
    NoError: ClassVar[QLowEnergyService.ServiceError] = ...
    OperationError: ClassVar[QLowEnergyService.ServiceError] = ...
    PrimaryService: ClassVar[QLowEnergyService.ServiceType] = ...
    ServiceDiscovered: ClassVar[QLowEnergyService.ServiceState] = ...
    UnknownError: ClassVar[QLowEnergyService.ServiceError] = ...
    WriteSigned: ClassVar[QLowEnergyService.WriteMode] = ...
    WriteWithResponse: ClassVar[QLowEnergyService.WriteMode] = ...
    WriteWithoutResponse: ClassVar[QLowEnergyService.WriteMode] = ...
    def characteristic(self, uuid: QBluetoothUuid) -> QLowEnergyCharacteristic: ...
    def characteristicChanged(self, *args, **kwargs): ...
    def characteristicRead(self, *args, **kwargs): ...
    def characteristicWritten(self, *args, **kwargs): ...
    def characteristics(self) -> list[QLowEnergyCharacteristic]: ...
    @overload
    def contains(self, characteristic: QLowEnergyCharacteristic) -> bool: ...
    @overload
    def contains(self, descriptor: QLowEnergyDescriptor) -> bool: ...
    def descriptorRead(self, *args, **kwargs): ...
    def descriptorWritten(self, *args, **kwargs): ...
    def discoverDetails(self) -> Any: ...
    def error(self, *args, **kwargs): ...
    def includedServices(self) -> list[QBluetoothUuid]: ...
    def readCharacteristic(self, characteristic: QLowEnergyCharacteristic) -> Any: ...
    def readDescriptor(self, descriptor: QLowEnergyDescriptor) -> Any: ...
    def serviceName(self) -> str: ...
    def serviceUuid(self) -> QBluetoothUuid: ...
    def state(self) -> QLowEnergyService.ServiceState: ...
    def stateChanged(self, *args, **kwargs): ...
    def type(self) -> QLowEnergyService.ServiceTypes: ...
    def writeCharacteristic(self, characteristic: QLowEnergyCharacteristic, newValue: QByteArray | bytes | bytearray, mode: QLowEnergyService.WriteMode = ...) -> Any: ...
    def writeDescriptor(self, descriptor: QLowEnergyDescriptor, newValue: QByteArray | bytes | bytearray) -> Any: ...

class QLowEnergyServiceData(sip.wrapper):
    class ServiceType(int):
        def __reduce__(self): ...
    ServiceTypePrimary: ClassVar[QLowEnergyServiceData.ServiceType] = ...
    ServiceTypeSecondary: ClassVar[QLowEnergyServiceData.ServiceType] = ...
    def addCharacteristic(self, characteristic: QLowEnergyCharacteristicData) -> Any: ...
    def addIncludedService(self, service: QLowEnergyService) -> Any: ...
    def characteristics(self) -> list[QLowEnergyCharacteristicData]: ...
    def includedServices(self) -> list[QLowEnergyService]: ...
    def isValid(self) -> bool: ...
    def setCharacteristics(self, characteristics: Iterable[QLowEnergyCharacteristicData]) -> Any: ...
    def setIncludedServices(self, services: Iterable[QLowEnergyService]) -> Any: ...
    def setType(self, type: QLowEnergyServiceData.ServiceType) -> Any: ...
    def setUuid(self, uuid: QBluetoothUuid) -> Any: ...
    def swap(self, other: QLowEnergyServiceData) -> Any: ...
    def type(self) -> QLowEnergyServiceData.ServiceType: ...
    def uuid(self) -> QBluetoothUuid: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
