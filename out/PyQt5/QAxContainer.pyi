import PyQt5.QtCore
import PyQt5.QtWidgets
import sip
from typing import Any, Iterable, overload

class QAxBase(sip.simplewrapper):
    def asVariant(self) -> Any: ...
    def classContext(self) -> int: ...
    def clear(self) -> Any: ...
    def control(self) -> str: ...
    def disableClassInfo(self) -> Any: ...
    def disableEventSink(self) -> Any: ...
    def disableMetaObject(self) -> Any: ...
    @overload
    def dynamicCall(self, a0: str, a1: Iterable[Any]) -> Any: ...
    @overload
    def dynamicCall(self, a0: str, value1: Any = ..., value2: Any = ..., value3: Any = ..., value4: Any = ..., value5: Any = ..., value6: Any = ..., value7: Any = ..., value8: Any = ...) -> Any: ...
    def generateDocumentation(self) -> str: ...
    def isNull(self) -> bool: ...
    def propertyBag(self) -> dict[str, Any]: ...
    def propertyWritable(self, a0: str) -> bool: ...
    @overload
    def querySubObject(self, a0: str, a1: Iterable[Any]) -> QAxObject: ...
    @overload
    def querySubObject(self, a0: str, value1: Any = ..., value2: Any = ..., value3: Any = ..., value4: Any = ..., value5: Any = ..., value6: Any = ..., value7: Any = ..., value8: Any = ...) -> QAxObject: ...
    def setClassContext(self, classContext: int) -> Any: ...
    def setControl(self, a0: str) -> bool: ...
    def setPropertyBag(self, a0: dict[str, Any]) -> Any: ...
    def setPropertyWritable(self, a0: str, a1: bool) -> Any: ...
    def verbs(self) -> list[str]: ...

class QAxObject(PyQt5.QtCore.QObject, QAxBase):
    @classmethod
    def childEvent(cls, *args, **kwargs): ...
    def connectNotify(self, a0: QMetaMethod) -> Any: ...
    @classmethod
    def customEvent(cls, *args, **kwargs): ...
    @classmethod
    def disconnectNotify(cls, *args, **kwargs): ...
    def doVerb(self, a0: str) -> bool: ...
    @classmethod
    def isSignalConnected(cls, *args, **kwargs): ...
    @classmethod
    def receivers(cls, *args, **kwargs): ...
    @classmethod
    def sender(cls, *args, **kwargs): ...
    @classmethod
    def senderSignalIndex(cls, *args, **kwargs): ...
    @classmethod
    def timerEvent(cls, *args, **kwargs): ...

class QAxWidget(PyQt5.QtWidgets.QWidget, QAxBase):
    @classmethod
    def actionEvent(cls, *args, **kwargs): ...
    def changeEvent(self, a0: QEvent) -> Any: ...
    @classmethod
    def childEvent(cls, *args, **kwargs): ...
    def clear(self) -> Any: ...
    @classmethod
    def closeEvent(cls, *args, **kwargs): ...
    def connectNotify(self, a0: QMetaMethod) -> Any: ...
    @classmethod
    def contextMenuEvent(cls, *args, **kwargs): ...
    @classmethod
    def create(cls, *args, **kwargs): ...
    def createHostWindow(self, a0: bool) -> bool: ...
    @classmethod
    def customEvent(cls, *args, **kwargs): ...
    @classmethod
    def destroy(cls, *args, **kwargs): ...
    @classmethod
    def disconnectNotify(cls, *args, **kwargs): ...
    def doVerb(self, a0: str) -> bool: ...
    @classmethod
    def dragEnterEvent(cls, *args, **kwargs): ...
    @classmethod
    def dragLeaveEvent(cls, *args, **kwargs): ...
    @classmethod
    def dragMoveEvent(cls, *args, **kwargs): ...
    @classmethod
    def dropEvent(cls, *args, **kwargs): ...
    @classmethod
    def enterEvent(cls, *args, **kwargs): ...
    @classmethod
    def event(cls, *args, **kwargs): ...
    @classmethod
    def focusInEvent(cls, *args, **kwargs): ...
    @classmethod
    def focusNextChild(cls, *args, **kwargs): ...
    @classmethod
    def focusNextPrevChild(cls, *args, **kwargs): ...
    @classmethod
    def focusOutEvent(cls, *args, **kwargs): ...
    @classmethod
    def focusPreviousChild(cls, *args, **kwargs): ...
    @classmethod
    def hideEvent(cls, *args, **kwargs): ...
    @classmethod
    def initPainter(cls, *args, **kwargs): ...
    @classmethod
    def inputMethodEvent(cls, *args, **kwargs): ...
    @classmethod
    def isSignalConnected(cls, *args, **kwargs): ...
    @classmethod
    def keyPressEvent(cls, *args, **kwargs): ...
    @classmethod
    def keyReleaseEvent(cls, *args, **kwargs): ...
    @classmethod
    def leaveEvent(cls, *args, **kwargs): ...
    @classmethod
    def metric(cls, *args, **kwargs): ...
    def minimumSizeHint(self) -> QSize: ...
    @classmethod
    def mouseDoubleClickEvent(cls, *args, **kwargs): ...
    @classmethod
    def mouseMoveEvent(cls, *args, **kwargs): ...
    @classmethod
    def mousePressEvent(cls, *args, **kwargs): ...
    @classmethod
    def mouseReleaseEvent(cls, *args, **kwargs): ...
    @classmethod
    def moveEvent(cls, *args, **kwargs): ...
    @classmethod
    def nativeEvent(cls, *args, **kwargs): ...
    @classmethod
    def paintEvent(cls, *args, **kwargs): ...
    @classmethod
    def receivers(cls, *args, **kwargs): ...
    def resizeEvent(self, a0: QResizeEvent) -> Any: ...
    @classmethod
    def sender(cls, *args, **kwargs): ...
    @classmethod
    def senderSignalIndex(cls, *args, **kwargs): ...
    @classmethod
    def sharedPainter(cls, *args, **kwargs): ...
    @classmethod
    def showEvent(cls, *args, **kwargs): ...
    def sizeHint(self) -> QSize: ...
    @classmethod
    def tabletEvent(cls, *args, **kwargs): ...
    @classmethod
    def timerEvent(cls, *args, **kwargs): ...
    def translateKeyEvent(self, a0: int, a1: int) -> bool: ...
    @classmethod
    def updateMicroFocus(cls, *args, **kwargs): ...
    @classmethod
    def wheelEvent(cls, *args, **kwargs): ...
